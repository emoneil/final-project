set.seed(1)
n = nrow(mental_health_data)
train_samples = sample(1:n, round(0.8*n))
# split mental_health_data into training and test sets
mental_health_train = mental_health_data[train_samples,]
mental_health_test = mental_health_data[-train_samples,]
# save the train and test data
write_tsv(x = mental_health_train, file = "../data/clean/mental_health_train.tsv")
write_tsv(x = mental_health_test, file = "../data/clean/mental_health_test.tsv")
library(ggcorrplot)
library(cowplot)
# read in the cleaned data
mental_health_data = read_tsv("../data/clean/mental_health_data.tsv")
table(mental_health_data$mental_health)
nrow(mental_health_data[mental_health_data$mental_health > 0,])
# read in the training data
mental_health_train = read_tsv("../data/clean/mental_health_train.tsv")
factor_cols = c("state", "sex", "urban_status", "marital", "education",
"own_home", "veteran", "employment", "child_count", "income",
"race", "age", "health_coverage", "med_cost", "check_up",
"flu_shot", "pneumonia_shot", "HIV_test", "chol_check",
"personal_doctor", "high_blood_pressure", "high_cholesterol",
"diabetes", "deaf", "blind", "smoker", "exercise",
"physical_activity_index", "strength_activity_index",
"heart_attack", "stroke", "asthma", "alcohol_consumption",
"strength", "depression")
mental_health_train = mental_health_train %>%
mutate(across(all_of(factor_cols), factor))
# calculate median days mental health not good
median_bad_mental_health_days = mental_health_train %>%
summarise(median(mental_health)) %>%
pull()
median_bad_mental_health_days
# calculate mean days mental health not good
mean_bad_mental_health_days = mental_health_train %>%
summarise(mean(mental_health)) %>%
pull()
mean_bad_mental_health_days
# create histogram of days mental health not good
response_hist = mental_health_train %>%
ggplot(aes(x = mental_health)) +
geom_histogram(binwidth = 5) +
labs(x = "Number of days of month mental health not good",
y = "Count of respondents") +
theme_bw()
# save the response histogram
ggsave(filename = "../results/response-histogram.png",
plot = response_hist,
device = "png",
width = 5,
height = 3)
# create histogram of transformed response
mental_health_train %>%
ggplot(aes(x = log1p(mental_health))) +
geom_histogram(binwidth = 0.5) +
labs(x = "Log transformed number of days of\nmonth mental health not good",
y = "Count of respondents") +
theme_bw()
unique(mental_health_train$state)
mental_health_train %>% group_by(state) %>% summarise(median(mental_health))
# examine top 10 states with lowest mental health
mental_health_train %>%
select(state, mental_health) %>%
group_by(state) %>%
summarise(num_more_than_10_bad_days = sum(mental_health > 10)) %>%
arrange(desc(num_more_than_10_bad_days)) %>%
head(10) %>%
mutate(state = fips(state, to = "Name")) %>%
write_tsv("../results/top-10-states-low-mental-health-data.tsv")
# check count
mental_health_train %>%
filter(state == 12) %>%
filter(mental_health > 10)
# examine top 10 states by number of mental health facilities
mental_health_train %>%
select(state, diag_eval) %>%
group_by(state) %>%
summarise(diag_eval = mean(diag_eval)) %>%
arrange(desc(diag_eval)) %>%
head(10) %>%
mutate(state = fips(state, to = "Name")) %>%
write_tsv("../results/top-10-states-mental-health-facilities-data.tsv")
# create a heatmap of days mental health not good across the U.S.
# create stratified sample based on state to reduce computing requirement
set.seed(1)
mental_health_data_sample = mental_health_train %>%
group_by(state) %>%
sample_n(100)
n_distinct(mental_health_data_sample$state)
fips(unique(mental_health_data_sample$state), to = "Name")
p = map_data("state") %>%
as_tibble() %>%
left_join(mental_health_data_sample %>%
mutate(state = fips(state, to = "Name")) %>%
rename(region = state,
`Days mental health not good` = mental_health) %>%
mutate(region = str_to_lower(region)),
by = c("region")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Days mental health not good`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void()
ggsave(filename = "../results/response-map.png",
plot = p,
device = "png",
width = 9,
height = 4)
# distribution of response by race
response_by_race = mental_health_train %>%
filter(race != 9) %>%
ggplot(aes(x = factor(race), y = mental_health, fill = factor(race))) +
geom_boxplot() +
labs(x = "Race",
y = "Days Mental Health Not Good") +
scale_x_discrete(labels=c("White", "Black", "AI or AN", "Asian", "PI",
"Other", "Multiracial", "Hispanic")) +
theme_bw() + theme(legend.position = "none")
# distribution of response by gender
response_by_gender = mental_health_train %>%
ggplot(aes(x = factor(sex), y = mental_health, fill = factor(sex))) +
geom_boxplot() +
labs(x = "Gender",
y = "Days Mental Health Not Good") +
scale_x_discrete(labels=c("Male", "Female")) +
theme_bw() + theme(legend.position = "none")
plot_grid(response_by_race, response_by_gender, align = "h")
# mental health not good and physical health not good overlayed density plots
mental_health_train %>%
filter(mental_health != 0 & physical_health != 0) %>%
pivot_longer(c(mental_health, physical_health),
names_to = "mental_or_physical",
values_to = "num_days_not_good") %>%
ggplot() +
geom_density(aes(x=num_days_not_good, colour=mental_or_physical))
# distribution of mental health vs. med_cost
mental_health_train %>%
filter(med_cost != 7 & med_cost != 9) %>%
ggplot(aes(x=factor(med_cost), y=mental_health, fill=factor(med_cost))) +
geom_violin() + geom_boxplot(width=0.1) +
scale_fill_brewer(palette="OrRd") +
xlab("Whether Could Not See Doctor Because of Cost") +
ylab("Days Mental Health Not Good") +
scale_x_discrete(labels=c("Yes, barrier of cost",
"No, not barrier of cost")) +
theme(legend.position="none") +
theme_bw()
# mental health proportion of respondents >= 15 days vs. med_cost *
mental_health_vs_med_cost = mental_health_train %>%
filter(med_cost != 7 & med_cost != 9) %>%
mutate(mental_health_15 = ifelse(mental_health >= 15, 1, 0)) %>%
group_by(med_cost) %>%
summarize(prop_mental_health_15 = mean(mental_health_15)) %>%
ggplot(aes(x=factor(med_cost), y=prop_mental_health_15, fill=factor(med_cost))) +
geom_bar(stat='identity') +
scale_fill_brewer(palette="Set1") +
xlab("Whether Could Not See Doctor Because of Cost") +
ylab("Proportion that days mental\nhealth not good >= 15 days") +
scale_x_discrete(labels=c("Yes, barrier of cost",
"No, not barrier of cost")) +
scale_fill_discrete(guide="none") +
theme_bw()
ggsave(filename = "../results/mental-health-vs-med-cost.png",
plot = mental_health_vs_med_cost,
device = "png",
width = 5,
height = 5)
# bar plot of average num state facilities with pay assistance vs. mental health not good >= vs. < 15
pay_asst_scale_data = mental_health_train %>%
mutate(mental_health_15 = ifelse(mental_health >= 15, 1, 0)) %>%
group_by(mental_health_15) %>%
summarize(avg_num_facilities = mean(pay_assist))
pay_asst_scale_data %>%
ggplot(aes(x=factor(mental_health_15), y=avg_num_facilities,
fill=factor(mental_health_15))) +
geom_bar(stat='identity') +
xlab("Number of Days Mental Health Not Good Greater vs. Less than 15") +
ylab("Average number of state mental health\nfacilities with pay assistance") +
scale_x_discrete(labels=c("Greater than/equal to 15 days",
"Less than 15 days")) +
theme(legend.position="none") +
theme_bw()
# proportion whose MH was not good for >= 15 days by race *
race_mental_health_data = mental_health_train %>%
mutate(mental_health_15 = ifelse(mental_health >= 15, 1, 0)) %>%
group_by(race) %>%
summarize(prop_mental_health_15 = mean(mental_health_15))
mental_health_vs_race = race_mental_health_data %>%
ggplot(aes(x=factor(race), y=prop_mental_health_15,
fill=factor(race))) +
geom_bar(stat='identity') +
xlab("Race") +
ylab("Proportion for race that days mental\nhealth not good >= 15 days") +
scale_x_discrete(labels=c("White", "Black", "AI or AN", "Asian", "PI",
"Other", "Multiracial", "Hispanic")) +
scale_fill_discrete(guide="none") +
theme_bw()
ggsave(filename = "../results/mental-health-vs-race.png",
plot = mental_health_vs_race,
device = "png",
width = 7,
height = 4)
# examine correlations among features:
# correlation between explanatory variables w/i mental health facility category
mental_health_facility_features = mental_health_train %>%
select(diag_eval, diet_exer_counsel, housing_services, employ_services,
emergency_services, suicide_prev_services, sed_services, smi_services,
other_languages, fee_scale, pay_assist, payment_cash,
payment_medicare, payment_medicaid)
corr = round(cor(mental_health_facility_features), 1)
corr_plot_facility = ggcorrplot(corr,
ggtheme = ggplot2::theme_bw,
colors = c("#6D9EC1", "white", "#E46726"),
tl.cex = 8) +
ggtitle("State mental health facilities") +
theme(plot.title = element_text(hjust = 0.5))
# correlation between explanatory variables within social/economic category
social_economic_features = mental_health_train %>%
select(sex, urban_status, marital, education, own_home, veteran, employment,
child_count, income, race, age, deaf, blind)
corr = round(cor(social_economic_features), 1)
corr_plot_social_economic = ggcorrplot(corr,
ggtheme = ggplot2::theme_bw,
colors = c("#6D9EC1",
"white", "#E46726"),
tl.cex = 8) +
ggtitle("Social and economic factors") +
theme(plot.title = element_text(hjust = 0.5))
# correlation between explanatory variables within clinical care category
clinical_care_features = mental_health_train %>%
select(health_coverage, med_cost, check_up, flu_shot,
pneumonia_shot, HIV_test, chol_check, personal_doctor)
corr = round(cor(clinical_care_features), 1)
corr_plot_clinical_care = ggcorrplot(corr,
ggtheme = ggplot2::theme_bw,
colors = c("#6D9EC1", "white", "#E46726"),
tl.cex = 8) +
ggtitle("Clinical care") +
theme(plot.title = element_text(hjust = 0.5))
# correlation between explanatory variables within health category
health_features = mental_health_train %>%
select(physical_health, high_blood_pressure, high_cholesterol,
diabetes, bmi, depression, smoker, alcohol_consumption,
exercise, strength, fruits, vegetables, french_fries,
physical_activity_index, strength_activity_index,
heart_attack, stroke, asthma)
corr = round(cor(health_features), 1)
corr_plot_health = ggcorrplot(corr,
ggtheme = ggplot2::theme_bw,
colors = c("#6D9EC1", "white", "#E46726"),
tl.cex = 8) +
ggtitle("Health and nutrition") +
theme(plot.title = element_text(hjust = 0.5))
png(width = 10,
height = 8,
res = 300,
units = "in",
filename = "../results/corr-among-category-features-plot.png")
plot_grid(corr_plot_facility, corr_plot_social_economic,
corr_plot_clinical_care, corr_plot_health, nrow = 2)
dev.off()
# plot correlations among all variables
corr = round(cor(mental_health_train), 1)
all_variables_corr_plot = ggcorrplot(corr,
type = "upper",
ggtheme = ggplot2::theme_bw,
colors = c("#6D9EC1", "white", "#E46726"),
tl.cex = 6)
ggsave(filename = "../results/corr-among-all-variables-plot.png",
plot = all_variables_corr_plot,
device = "png",
width = 9,
height = 9)
cor(mental_health_train$age, mental_health_train$employment)
cor(mental_health_train$strength,
mental_health_train$strength_activity_index)
cor(mental_health_train$exercise, mental_health_train$physical_activity_index)
# examine most positive pairwise correlations
pos_pairwise_correlations =
mental_health_train %>%
as.matrix %>%
cor %>%
as.data.frame %>%
rownames_to_column(var = 'var1') %>%
gather(var2, value, -var1) %>%
filter(var1 != var2) %>%
arrange(desc(value)) %>%
# remove duplicates
mutate(var_order = paste(var1, var2) %>%
strsplit(split = ' ') %>%
map_chr( ~ sort(.x) %>%
paste(collapse = ' '))) %>%
mutate(cnt = 1) %>%
group_by(var_order) %>%
mutate(cumsum = cumsum(cnt)) %>%
filter(cumsum != 2) %>%
ungroup %>%
select(-var_order, -cnt, -cumsum) %>% head(150)
# examine most negative pairwise correlations
neg_pairwise_correlations =
mental_health_train %>%
as.matrix %>%
cor %>%
as.data.frame %>%
rownames_to_column(var = 'var1') %>%
gather(var2, value, -var1) %>%
filter(var1 != var2) %>%
arrange(value) %>%
# remove duplicates
mutate(var_order = paste(var1, var2) %>%
strsplit(split = ' ') %>%
map_chr( ~ sort(.x) %>%
paste(collapse = ' '))) %>%
mutate(cnt = 1) %>%
group_by(var_order) %>%
mutate(cumsum = cumsum(cnt)) %>%
filter(cumsum != 2) %>%
ungroup %>%
select(-var_order, -cnt, -cumsum) %>% head(100)
# remove depression
mental_health_train = mental_health_train %>% select(-depression)
mental_health_test = mental_health_test %>% select(-depression)
write_tsv(x = mental_health_train, file = "../data/clean/mental_health_train.tsv")
write_tsv(x = mental_health_test, file = "../data/clean/mental_health_test.tsv")
View(neg_pairwise_correlations)
# load libraries
library(tidyverse)
library(kableExtra)
library(glmnetUtils) # to run ridge and lasso
source("../code/functions/plot_glmnet.R") # for lasso/ridge trace plots
# read in the training data
mental_health_train = read_tsv("../data/clean/mental_health_train.tsv")
factor_cols = c("state", "sex", "urban_status", "marital", "education",
"own_home", "veteran", "employment", "child_count", "income",
"race", "age", "health_coverage", "med_cost", "check_up",
"flu_shot", "pneumonia_shot", "HIV_test", "chol_check",
"personal_doctor", "high_blood_pressure", "high_cholesterol",
"diabetes", "deaf", "blind", "smoker", "exercise",
"physical_activity_index", "strength_activity_index",
"heart_attack", "stroke", "asthma", "alcohol_consumption",
"strength", "depression")
mental_health_train = mental_health_train %>%
mutate(across(all_of(factor_cols), factor))
lm_fit = lm(mental_health ~ . -state, data = mental_health_train)
log_lm_fit = lm(log1p(mental_health) ~ . -state, data = mental_health_train)
summary(lm_fit)
r_squared = summary(lm_fit)$r.squared
# save the linear fit object
save(lm_fit, file = "../results/lm_fit.Rda")
hist(lm_fit$residuals)
hist(log_lm_fit$residuals)
# compare original with log transform training error
linear_predictions = predict(lm_fit, mental_health_train) %>%
as.numeric()
linear_train_error = (linear_predictions -
mental_health_train$mental_health)^2
linear_train_rmse = sqrt(mean(linear_train_error))
log_linear_predictions = predict(log_lm_fit, mental_health_train) %>%
as.numeric()
back_transformed_train_error = (exp(log_linear_predictions) -
mental_health_train$mental_health)^2
back_transformed_train_rmse = sqrt(mean(back_transformed_train_error))
# run ridge regression
set.seed(1)
ridge_fit = cv.glmnet(mental_health ~ . -state,
alpha = 0,
nfolds = 10,
data = mental_health_train)
# save the ridge fit object
save(ridge_fit, file = "../results/ridge_fit.Rda")
set.seed(1)
log_ridge_fit = cv.glmnet(log1p(mental_health) ~ . -state,
alpha = 0,
nfolds = 10,
data = mental_health_train)
# compare original with log transform training error
ridge_predictions = predict(ridge_fit, mental_health_train) %>%
as.numeric()
ridge_train_error = (ridge_predictions -
mental_health_train$mental_health)^2
ridge_train_rmse = sqrt(mean(ridge_train_error))
log_ridge_predictions = predict(log_ridge_fit, mental_health_train) %>%
as.numeric()
back_transformed_train_error = (exp(log_ridge_predictions) -
mental_health_train$mental_health)^2
back_transformed_train_rmse = sqrt(mean(back_transformed_train_error))
# create ridge CV plot
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "../results/ridge-cv-plot.png")
plot(ridge_fit)
dev.off()
# create ridge trace plot
ridge_trace_plot = plot_glmnet(ridge_fit, mental_health_train,
features_to_plot = 6)
ggsave(filename = "../results/ridge-trace-plot.png",
plot = ridge_trace_plot,
device = "png",
width = 6,
height = 4)
# collect least squares and ridge coeffs with different signs into table
tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
features = names(coef(lm_fit)[-1])) %>%
mutate(diff_signs = lm_coef*ridge_coef) %>%
filter(diff_signs < 0) %>%
select(features, lm_coef, ridge_coef)
# run lasso regression
set.seed(1)
lasso_fit = cv.glmnet(mental_health ~ . -state,
alpha = 1,
nfolds = 10,
data = mental_health_train)
# save the lasso fit object
save(lasso_fit, file = "../results/lasso_fit.Rda")
num_features = lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
# create lasso CV plot
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "../results/lasso-cv-plot.png")
plot(lasso_fit)
dev.off()
# create lasso trace plot
lasso_trace_plot = plot_glmnet(lasso_fit, mental_health_train,
features_to_plot = 6)
ggsave(filename = "../results/lasso-trace-plot.png",
plot = lasso_trace_plot,
device = "png",
width = 6,
height = 4)
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(lasso_fit, mental_health_train)
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
write_tsv("../results/lasso-features-table.tsv")
# run elastic net regression
set.seed(1)
elnet_fit = cva.glmnet(mental_health ~ . -state,
nfolds = 10,
data = mental_health_train)
# save the elastic net fit object
save(elnet_fit, file = "../results/elnet_fit.Rda")
# plot the minimum CV error for each value of alpha
elnet_cv_error_alpha_plot = plot_cva_glmnet(elnet_fit)
ggsave(filename = "../results/elnet-cv-error-alpha-plot.png",
plot = elnet_cv_error_alpha_plot,
device = "png",
width = 6,
height = 4)
elnet_fit_best = extract_best_elnet(elnet_fit)
elnet_fit_best$alpha
# create elastic net CV plot
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "../results/elnet-cv-plot.png")
plot(elnet_fit_best)
dev.off()
# create elastic net trace plot
elnet_trace_plot = plot_glmnet(elnet_fit_best, mental_health_train,
features_to_plot = 10)
ggsave(filename = "../results/elnet-trace-plot.png",
plot = elnet_trace_plot,
device = "png",
width = 6,
height = 4)
# load libraries
library(tidyverse)
library(kableExtra)
library(glmnetUtils) # to run ridge and lasso
source("../code/functions/plot_glmnet.R") # for lasso/ridge trace plots
# read in the training data
mental_health_train = read_tsv("../data/clean/mental_health_train.tsv")
factor_cols = c("state", "sex", "urban_status", "marital", "education",
"own_home", "veteran", "employment", "child_count", "income",
"race", "age", "health_coverage", "med_cost", "check_up",
"flu_shot", "pneumonia_shot", "HIV_test", "chol_check",
"personal_doctor", "high_blood_pressure", "high_cholesterol",
"diabetes", "deaf", "blind", "smoker", "exercise", "strength",
"physical_activity_index", "strength_activity_index",
"heart_attack", "stroke", "asthma", "alcohol_consumption")
mental_health_train = mental_health_train %>%
mutate(across(all_of(factor_cols), factor))
mental_health_train
sapply(mental_health_train, class)
lm_fit = lm(mental_health ~ . -state, data = mental_health_train)
log_lm_fit = lm(log1p(mental_health) ~ . -state, data = mental_health_train)
summary(lm_fit)
r_squared = summary(lm_fit)$r.squared
r_squared
# save the linear fit object
save(lm_fit, file = "../results/lm_fit.Rda")
hist(lm_fit$residuals)
hist(log_lm_fit$residuals)
# save the linear fit object
save(lm_fit, file = "../results/lm_fit.Rda")
hist(lm_fit$residuals)
hist(lm_fit$residuals)
r_squared = summary(lm_fit)$r.squared
# save the linear fit object
save(lm_fit, file = "../results/lm_fit.Rda")
hist(lm_fit$residuals)
hist(log_lm_fit$residuals)

plot = numeric_variables_corr_plot,
device = "png",
width = 9,
height = 9)
# mental_health vs. depression
response_by_depression = mental_health_train %>%
ggplot(aes(x = depression, y = mental_health, fill = depression)) +
geom_boxplot() +
labs(x = "Whether ever told had a depressive disorder",
y = "Days mental health not good") +
scale_x_discrete(labels=c("Yes", "No", "Don’t know/\nNot sure", "Refused")) +
theme_bw() + theme(legend.position = "none")
ggsave(filename = "../results/mental-health-vs-depression-plot.png",
plot = response_by_depression,
device = "png",
width = 6,
height = 4)
# mental_health vs. age
response_by_age = mental_health_train %>%
ggplot(aes(x = age, y = mental_health, fill = age)) +
geom_boxplot() +
labs(x = "Age",
y = "Days mental health not good") +
scale_x_discrete(labels=c("18 to 24", "25 to 29", "30 to 34", "35 to 39",
"40 to 44", "45 to 49", "50 to 54", "55 to 59",
"60 to 64", "65 to 69", "70 to 74", "75 to 79",
"80 or older", "Don’t know/\nRefused/\nMissing")) +
theme_bw() + theme(legend.position = "none")
ggsave(filename = "../results/mental-health-vs-age-plot.png",
plot = response_by_age,
device = "png",
width = 10,
height = 4)
# exercise and physical activity index
physical_health_by_exercise = mental_health_train %>%
ggplot(aes(x = exercise, y = physical_health, fill = exercise)) +
geom_boxplot() +
labs(x = "Whether participated in any physical\nactivities or exercises in past month",
y = "Numbers of days physical health not good") +
scale_x_discrete(labels=c("Yes", "No", "Don’t know/Not sure", "Refused")) +
theme_bw() + theme(legend.position = "none")
ggsave(filename = "../results/physical-health-vs-exercise-plot.png",
plot = physical_health_by_exercise,
device = "png",
width = 6,
height = 4)
# plot grid for boxplots for physical health relationship:
# bmi and high blood pressure
bmi_by_high_blood_pressure = mental_health_train %>%
ggplot(aes(x = high_blood_pressure, y = bmi/100,
fill = high_blood_pressure)) +
geom_boxplot() +
labs(x = "Whether ever told high blood pressure",
y = "BMI") +
scale_x_discrete(labels=c("Yes", "Yes, female, only pregnancy",
"No", "Borderline high\nor pre-hypertensive",
"Don’t know/Not Sure", "Refused")) +
theme_bw() + theme(legend.position = "none")
# bmi and diabetes
bmi_by_diabetes = mental_health_train %>%
ggplot(aes(x = diabetes, y = bmi/100, fill = diabetes)) +
geom_boxplot() +
labs(x = "Whether ever told had diabetes",
y = "BMI") +
scale_x_discrete(labels=c("Yes", "Yes, female, only pregnancy",
"No", "No, pre-diabetes\nor borderline",
"Don’t know/Not Sure", "Refused")) +
theme_bw() + theme(legend.position = "none")
# physical health and high blood pressure
physical_health_by_high_blood_pressure = mental_health_train %>%
ggplot(aes(x = high_blood_pressure, y = physical_health,
fill = high_blood_pressure)) +
geom_boxplot() +
labs(x = "Whether ever told high blood pressure",
y = "Number of days physical health not good") +
scale_x_discrete(labels=c("Yes", "Yes, female, only pregnancy",
"No", "Borderline high\nor pre-hypertensive",
"Don’t know/Not Sure", "Refused")) +
theme_bw() + theme(legend.position = "none")
# physical health and diabetes
physical_health_by_diabetes = mental_health_train %>%
ggplot(aes(x = diabetes, y = physical_health, fill = diabetes)) +
geom_boxplot() +
labs(x = "Whether ever told had diabetes",
y = "Number of days physical health not good") +
scale_x_discrete(labels=c("Yes", "Yes, female, only pregnancy",
"No", "No, pre-diabetes\nor borderline",
"Don’t know/Not Sure", "Refused")) +
theme_bw() + theme(legend.position = "none")
png(width = 10,
height = 10,
res = 300,
units = "in",
filename = "../results/physical-health-relationships-plot-grid.png")
plot_grid(bmi_by_high_blood_pressure, bmi_by_diabetes,
physical_health_by_high_blood_pressure, physical_health_by_diabetes,
nrow = 2)
dev.off()
# remove depression and state (the latter will not be used for any modeling)
mental_health_train = mental_health_train %>% select(-depression, -state)
mental_health_test = mental_health_test %>% select(-depression, -state)
write_tsv(x = mental_health_train, file = "../data/clean/mental_health_train.tsv")
write_tsv(x = mental_health_test, file = "../data/clean/mental_health_test.tsv")
knitr::include_graphics("../results/response-map.png")
read_tsv("../results/top-10-states-low-mental-health-data.tsv")
read_tsv("../results/top-10-states-mental-health-facilities-data.tsv")
knitr::include_graphics("../results/mental-health-vs-race.png")
knitr::include_graphics("../results/mental-health-vs-med-cost.png")
knitr::include_graphics("../results/corr-among-numeric-variables-plot.png")
knitr::include_graphics("../results/corr-among-numeric-variables-plot.png")
knitr::include_graphics("../results/mental-health-vs-age-plot.png")
knitr::include_graphics("../results/mental-health-vs-depression-plot.png")
physical_health_by_exercise
knitr::include_graphics("../results/physical-health-relationships-plot-grid.png")
png(width = 12,
height = 10,
res = 300,
units = "in",
filename = "../results/physical-health-relationships-plot-grid.png")
plot_grid(bmi_by_high_blood_pressure, bmi_by_diabetes,
physical_health_by_high_blood_pressure, physical_health_by_diabetes,
nrow = 2)
dev.off()
knitr::include_graphics("../results/physical-health-relationships-plot-grid.png")
png(width = 14,
height = 10,
res = 300,
units = "in",
filename = "../results/physical-health-relationships-plot-grid.png")
plot_grid(bmi_by_high_blood_pressure, bmi_by_diabetes,
physical_health_by_high_blood_pressure, physical_health_by_diabetes,
nrow = 2)
dev.off()
knitr::include_graphics("../results/physical-health-relationships-plot-grid.png")
png(width = 15,
height = 10,
res = 300,
units = "in",
filename = "../results/physical-health-relationships-plot-grid.png")
plot_grid(bmi_by_high_blood_pressure, bmi_by_diabetes,
physical_health_by_high_blood_pressure, physical_health_by_diabetes,
nrow = 2)
dev.off()
knitr::include_graphics("../results/physical-health-relationships-plot-grid.png")
knitr::include_graphics("../results/physical-health-relationships-plot-grid.png")
# load linear fit object
load("../results/lm_fit.Rda")
summary(lm_fit)
knitr::include_graphics("../results/elnet-cv-error-alpha-plot.png")
knitr::include_graphics("../results/cp-table-cv-plot.png")
read_tsv("../results/train-model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "These are the root mean squared training
errors of the models fitted.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
elnet_fit_best$alpha
# evaluate elastic net rmse
elnet_predictions = predict(elnet_fit,
alpha = elnet_fit$alpha,
newdata = mental_health_test,
s = "lambda.1se") %>% as.numeric()
elnet_error = (elnet_predictions - mental_health_test$mental_health)^2
elnet_rmse = sqrt(mean(elnet_error))
# create table for regression methods test errors
tibble(`Regression method` = c("Linear", "Ridge", "Lasso", "Elastic Net"),
`Test RMSE` = c(linear_rmse,
ridge_rmse,
lasso_rmse,
elnet_rmse))
elnet_train_predictions = predict(elnet_fit, mental_health_train) %>%
as.numeric()
elnet_train_error = (elnet_train_predictions -
mental_health_train$mental_health)^2
elnet_train_rmse = sqrt(mean(elnet_train_error))
elnet_train_predictions = predict(elnet_fit,
mental_health_train,
alpha = elnet_fit$alpha,
s = "lambda.1se") %>%
as.numeric()
elnet_train_error = (elnet_train_predictions -
mental_health_train$mental_health)^2
elnet_train_rmse = sqrt(mean(elnet_train_error))
# determine training error for models
linear_train_predictions = predict(lm_fit, mental_health_train) %>%
as.numeric()
linear_train_error = (linear_train_predictions -
mental_health_train$mental_health)^2
linear_train_rmse = sqrt(mean(linear_train_error))
ridge_train_predictions = predict(ridge_fit,
mental_health_train,
s = "lambda.1se") %>%
as.numeric()
ridge_train_error = (ridge_train_predictions -
mental_health_train$mental_health)^2
ridge_train_rmse = sqrt(mean(ridge_train_error))
lasso_train_predictions = predict(lasso_fit,
mental_health_train,
s = "lambda.1se") %>%
as.numeric()
lasso_train_error = (lasso_train_predictions -
mental_health_train$mental_health)^2
lasso_train_rmse = sqrt(mean(lasso_train_error))
elnet_train_predictions = predict(elnet_fit,
mental_health_train,
alpha = elnet_fit$alpha,
s = "lambda.1se") %>%
as.numeric()
elnet_train_error = (elnet_train_predictions -
mental_health_train$mental_health)^2
elnet_train_rmse = sqrt(mean(elnet_train_error))
dt_train_predictions = predict(optimal_tree, mental_health_train) %>%
as.numeric()
dt_train_error = (dt_train_predictions -
mental_health_train$mental_health)^2
dt_train_rmse = sqrt(mean(dt_train_error))
rf_train_predictions = predict(rf_fit_tuned, mental_health_train) %>%
as.numeric()
rf_train_error = (rf_train_predictions -
mental_health_train$mental_health)^2
rf_train_rmse = sqrt(mean(rf_train_error))
gbm_train_predictions = predict(gbm_fit_tuned, mental_health_train) %>%
as.numeric()
gbm_train_error = (gbm_train_predictions -
mental_health_train$mental_health)^2
gbm_train_rmse = sqrt(mean(gbm_train_error))
train_error_for_models = tribble(
~`Model`, ~`Train RMSE`,
#------/-------
"Linear regression", linear_train_rmse,
"Ridge regression", ridge_train_rmse,
"Lasso regression", lasso_train_rmse,
"Elastic net regression", elnet_train_rmse,
"Decision tree", dt_train_rmse,
"Random forest", rf_train_rmse,
"Boosting", gbm_train_rmse
)
train_error_for_models
write_tsv(train_error_for_models, "../results/train-model-evaluation.tsv")
# combine all model test errors and intercept-only model test error
test_error_for_models = tribble(
~`Model`, ~`Test RMSE`,
#------/-------
"Linear regression", linear_rmse,
"Ridge regression", ridge_rmse,
"Lasso regression", lasso_rmse,
"Elastic net regression", elnet_rmse,
"Decision tree", dt_rmse,
"Random forest", rf_rmse,
"Boosting", gbm_rmse,
"Intercept-only", intercept_only_rmse,
)
write_tsv(test_error_for_models, "../results/test-model-evaluation.tsv")
test_error_for_models
read_tsv("../results/train-model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "These are the root mean squared training
errors of the models fitted.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
summary(lm_fit)
summary(log_lm_fit)
hist(lm_fit$residuals)
I began my analysis with an ordinary least squares regression of bad mental health days on all 50 explanatory variables (i.e., which excludes state). The OLS regression revealed that the following variables are significantly associated with the response at the 0.01 level (note that a factor variable is included in this list if any of its levels are statistically significant at the 0.01 level): number of mental health facilities in state that offer diagnostic evaluation, number of mental health facilities in state that offer supported employment services, number of mental health facilities in state that accept Medicaid as source of payment for mental health treatment services, sex, urban status, marital status, education, whether owns or rents their home, veteran status, employment status, number of children in household, income, race, age, whether deaf, whether blind, whether has any kind of health care coverage, whether reported cost as barrier to seeing doctor, length of time since last checkup, whether tested for HIV, whether cholesterol checked within past five years, whether has one person they think of as their personal doctor or health care provider, number of bad days of physical health in past month, whether high blood pressure, whether high cholesterol, whether told has diabetes, BMI, smoker status, alcohol consumption, exercise activity, strength activity index, fruit intake, vegetable intake, french fry intake, whether ever diagnosed with stroke, and whether has asthma.
The multiple R-squared indicates that these features explain 21.4% of the variation in response. Note: I additionally explored an OLS regression with a log-transformed response. However, when I used this model to predict the training data, i.e., obtained the training error, it was worse than that for the non-transformed response (and this was also the case for the penalized regression methods including ridge). (This makes sense because plotting the distribution of the transformed response was still heavily skewed.) Thus, I decided to continue my modeling on the original (untransformed) response variable. (Additionally, plotting the distribution of the residuals for the linear fit did not appear heavily right-skewed.) See the Appendix \@ref(appendix) for the linear regression model summary.
hist(lm_fit$residuals)
mental_health_train %>%
ggplot(aes(x = log1p(mental_health))) +
geom_histogram(binwidth = 0.5) +
labs(x = "Log transformed number of days of\nmonth mental health not good",
y = "Count of respondents") +
theme_bw()
ridge_fit$lambda
ridge_fit$lambda.1se
knitr::include_graphics("../results/ridge-cv-plot.png")
knitr::include_graphics("../results/ridge-trace-plot.png")
knitr::include_graphics("../results/ridge-trace-plot.png")
knitr::include_graphics("../results/ridge-trace-plot.png")
lasso_fit$lambda.1se
num_features = lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
num_features
lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
knitr::include_graphics("../results/lasso-cv-plot.png")
read_tsv("../results/lasso-features-table.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 4,
col.names = c("Feature", "Coefficient"),
caption = "These are the nonzero standardized coefficients
from the lasso model based on a value for lambda determined by
the one-standard-error rule.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
read_tsv("../results/lasso-features-table.tsv")
read_tsv("../results/lasso-features-table.tsv") %>%
head(10) %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 4,
col.names = c("Feature", "Coefficient"),
caption = "These are the nonzero standardized coefficients
from the lasso model based on a value for lambda determined by
the one-standard-error rule.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
read_tsv("../results/lasso-features-table.tsv") %>%
head(10)
knitr::include_graphics("../results/lasso-trace-plot.png")
knitr::include_graphics("../results/lasso-trace-plot.png")
# extract features selected by elastic net and their coefficients
beta_hat_std = extract_std_coefs(elnet_fit, mental_health_train)
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
write_tsv("../results/elnet-features-table.tsv")
# create elastic net CV plot
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "../results/elnet-cv-plot.png")
plot(elnet_fit_best)
dev.off()
# create elastic net trace plot
elnet_trace_plot = plot_glmnet(elnet_fit_best, mental_health_train,
features_to_plot = 6)
ggsave(filename = "../results/elnet-trace-plot.png",
plot = elnet_trace_plot,
device = "png",
width = 6,
height = 4)
elnet_fit_best$alpha
eta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
knitr::include_graphics("../results/elnet-cv-plot.png")
num_features_lasso = lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
num_features_lasso
num_features_elnet = elnet_fit$nzero[elnet_fit$lambda == elnet_fit$lambda.1se]
num_features_elnet
elnet_fit$nzero[elnet_fit$lambda == elnet_fit$lambda.1se]
lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
elnet_fit$nzero[elnet_fit$lambda == elnet_fit$lambda.1se]
beta_hat_std = extract_std_coefs(elnet_fit, mental_health_train)
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
# extract features selected by elastic net and their coefficients
beta_hat_std = extract_std_coefs(elnet_fit, mental_health_train)
# extract features selected by elastic net and their coefficients
beta_hat_std = extract_std_coefs(elnet_fit_best, mental_health_train)
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
write_tsv("../results/elnet-features-table.tsv")
elnet_fit_best$lambda.1se
knitr::include_graphics("../results/elnet-cv-plot.png")
read_tsv("../results/elnet-features-table.tsv") %>%
head(10)
knitr::include_graphics("../results/elnet-trace-plot.png")
elnet_fit_best$lambda.1se
elnet_fit_best$alpha
knitr::include_graphics("../results/cp-table-cv-plot.png")
sapply(mental_health_train, class)
sapply(mental_health_test, class)
sapply(mental_health_train, class)
sapply(mental_health_test, class)
# the number of splits for the optimal tree
optimal_tree_info$nsplit
optimal_tree_info = cp_table %>%
filter(xerror - xstd < min(xerror)) %>%
arrange(nsplit) %>% head(1)
# the number of splits for the optimal tree
optimal_tree_info$nsplit
# the number of splits for the optimal tree
optimal_tree_info$nsplit
knitr::include_graphics("../results/optimal-tree-plot.png")
rpart.plot(optimal_tree)
knitr::include_graphics("../results/oob-error-vs-m-plot.png")
# value of mtry
rf_fit_default$mtry
rf_fit_default$terms
floor(50/3)
best_m
knitr::include_graphics("../results/oob-error-vs-m-plot.png")
plot(rf_fit_default)
knitr::include_graphics("../results/oob-error-vs-ntrees-plot.png")
knitr::include_graphics("../results/oob-error-vs-ntrees-plot.png")
knitr::include_graphics("../results/oob-error-vs-ntrees-plot.png")
rf_fit_tuned$mtry
oob_error_vs_ntrees_plot
varImpPlot(rf_fit_tuned, n.var = 10)
knitr::include_graphics("../results/rf-var-importance-plot.png")
varImpPlot(rf_fit_tuned, n.var = 10)
knitr::include_graphics("../results/rf-var-importance-plot.png")
knitr::include_graphics("../results/rf-var-importance-plot.png")
knitr::include_graphics("../results/cv-errors-vs-ntrees-vary-depth-plot.png")
knitr::include_graphics("../results/cv-errors-vs-ntrees-vary-depth-plot.png")
cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = factor(depth))) +
# add horizontal dashed lines at the minima of the curves
geom_hline(yintercept = min(gbm_fit_1$cv.error),
linetype = "dashed", color = "red") +
geom_hline(yintercept = min(gbm_fit_2$cv.error),
linetype = "dashed", color = "green") +
geom_hline(yintercept = min(gbm_fit_3$cv.error),
linetype = "dashed", color = "blue") +
geom_hline(yintercept = min(gbm_fit_4$cv.error),
linetype = "dashed", color = "purple") +
geom_line() +
# set colors to match horizontal line minima
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c("red", "green", "blue", "purple")) +
labs(x = "Number of trees", y = "CV error", colour = "Interaction depth") +
theme_bw()
optimal_num_trees = gbm.perf(gbm_fit_3, plot.it = FALSE)
optimal_num_trees
summary(gbm_fit_tuned, n.trees = optimal_num_trees, plotit = FALSE) %>%
head(10)
read_tsv("../results/boosting-relative-influence-table.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 4,
col.names = c("Feature", "Coefficient"),
caption = "These are the first ten rows of the relative influence
table for the optimal boosting model.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
read_tsv("../results/boosting-relative-influence-table.tsv")
read_tsv("../results/boosting-relative-influence-table.tsv")
varImpPlot(rf_fit_tuned, n.var = 10)
knitr::include_graphics("../results/partial-dependence-plots.png")
knitr::include_graphics("../results/partial-dependence-plots.png")
levels(mental_health_train$med_cost)
levels(mental_health_tree_train$med_cost)
knitr::include_graphics("../results/partial-dependence-plots.png")
mental_health_train %>% filter(employment == 8) %>% nrow()
read_tsv("../results/model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "These are the root mean squared test
errors of the models fitted. This table includes
an intercept-only model for comparison.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
read_tsv("../results/test-model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "These are the root mean squared test
errors of the models fitted. This table includes
an intercept-only model for comparison.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
read_tsv("../results/test-model-evaluation.tsv")
read_tsv("../results/test-model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "These are the root mean squared test
errors of the models fitted. This table includes
an intercept-only model for comparison.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
read_tsv("../results/test-model-evaluation.tsv")
nrow(mental_health_train)/50
optimal_tree_info$nsplit
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
betas = beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
View(betas)
summary(lm_fit)
read_tsv("../results/train-model-evaluation.tsv")
mean(mental_health_train$mental_health)
betas
ggsave(filename = "../results/corr-among-numeric-variables-plot.png",
plot = numeric_variables_corr_plot,
device = "png",
width = 6,
height = 6)
knitr::include_graphics("../results/corr-among-numeric-variables-plot.png")
ggsave(filename = "../results/corr-among-numeric-variables-plot.png",
plot = numeric_variables_corr_plot,
device = "png",
width = 5,
height = 5)
knitr::include_graphics("../results/corr-among-numeric-variables-plot.png")
png(width = 12,
height = 8,
res = 300,
units = "in",
filename = "../results/physical-health-relationships-plot-grid.png")
plot_grid(bmi_by_high_blood_pressure, bmi_by_diabetes,
physical_health_by_high_blood_pressure, physical_health_by_diabetes,
nrow = 2)
dev.off()
png(width = 15,
height = 10,
res = 300,
units = "in",
filename = "../results/physical-health-relationships-plot-grid.png")
plot_grid(bmi_by_high_blood_pressure, bmi_by_diabetes,
physical_health_by_high_blood_pressure, physical_health_by_diabetes,
nrow = 2)
dev.off()
setwd("~/Desktop/Fall 2021/STAT 471/final-project/report")
